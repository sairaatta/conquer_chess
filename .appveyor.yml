# Build a Windows x64 Release exe with SFML + Qt6 via vcpkg and upload it as an artifact.
version: '{build}'
image: Visual Studio 2022

environment:
  VCPKG_ROOT: C:\Tools\vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-windows
  APPVEYOR_SAVE_CACHE_ON_ERROR: true

# Speed up repeat builds by caching vcpkg-installed packages.
cache:
  - C:\Tools\vcpkg\installed -> **\CMakeLists.txt

install:
  # Go to vcpkg folder, update it, and bootstrap
  - cmd: >
      cd %VCPKG_ROOT% &&
      git pull &&
      .\bootstrap-vcpkg.bat

  # Install SFML + Qt dependencies (single-line to avoid cmd parsing issues)
  - cmd: >
      %VCPKG_ROOT%\vcpkg.exe install sfml:x64-windows qtbase:x64-windows qttools:x64-windows --triplet x64-windows --recurse --binarycaching --verbose

  # Return to your project folder
  - cmd: cd %APPVEYOR_BUILD_FOLDER%

build_script:
  - cmd: >
      cd %APPVEYOR_BUILD_FOLDER% &&
      mkdir build &&
      cd build &&
      cmake -A x64 .. -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_TOOLCHAIN_FILE="%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake"
        -DVCPKG_TARGET_TRIPLET="x64-windows"
        -DCMAKE_PREFIX_PATH="%VCPKG_ROOT%\installed\x64-windows\share\qt6" &&
      cmake --build . --config Release

after_build:
  - ps: |
      $root = $env:APPVEYOR_BUILD_FOLDER
      $out  = Join-Path $root 'dist'
      New-Item -ItemType Directory -Force -Path $out | Out-Null

      # Grab the first Release exe produced (adjust if you have a specific target exe)
      $exe = Get-ChildItem -Recurse -Filter *.exe -Path "$root\build" |
             Where-Object { $_.FullName -match '\\Release\\' } |
             Sort-Object Length -Descending |
             Select-Object -First 1

      if (-not $exe) { throw "No exe found in the Release build." }

      Copy-Item $exe.FullName $out

      # Copy SFML + Qt DLLs
      $bin = Join-Path $env:VCPKG_ROOT 'installed\x64-windows\bin'
      $patterns = @(
        'sfml-*.dll',
        'openal32.dll',
        'freetype*.dll',
        'ogg*.dll',
        'vorbis*.dll',
        'vorbisfile*.dll',
        'vorbisenc*.dll',
        'zlib*.dll',
        'brotli*.dll',
        'Qt6*.dll'
      )
      foreach ($p in $patterns) { Copy-Item (Join-Path $bin $p) $out -ErrorAction SilentlyContinue }

      # Ship game assets if present
      foreach ($folder in @('resources','images')) {
        $src = Join-Path $root $folder
        if (Test-Path $src) { Copy-Item $src $out -Recurse -Force }
      }

artifacts:
  - path: dist\**
    name: conquer_chess-win64
    type: WebDeployPackage

on_failure:
  - ps: Get-ChildItem -Recurse "$env:APPVEYOR_BUILD_FOLDER\build" -ErrorAction SilentlyContinue | Out-String | Write-Host
